'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _desired = require('./desired');

var _desired2 = _interopRequireDefault(_desired);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _https = require('https');

var _https2 = _interopRequireDefault(_https);

var _setupBase = require('../../setup-base');

var _setupBase2 = _interopRequireDefault(_setupBase);

var pem = _bluebird2['default'].promisifyAll(require('pem'));

describe('When accessing an HTTPS encrypted site in Safari', function callee$0$0() {
  var sslServer, driver;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        sslServer = undefined;

        before(function callee$1$0() {
          var privateKey, keys, pemCertificate;
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                if (!process.env.TRAVIS) {
                  context$2$0.next = 3;
                  break;
                }

                this.skip();
                return context$2$0.abrupt('return');

              case 3:
                context$2$0.next = 5;
                return _regeneratorRuntime.awrap(pem.createPrivateKeyAsync());

              case 5:
                privateKey = context$2$0.sent;
                context$2$0.next = 8;
                return _regeneratorRuntime.awrap(pem.createCertificateAsync({ days: 1, selfSigned: true, serviceKey: privateKey.key }));

              case 8:
                keys = context$2$0.sent;
                pemCertificate = keys.certificate;

                sslServer = _https2['default'].createServer({ key: keys.serviceKey, cert: pemCertificate }, function (req, res) {
                  res.end('Arbitrary text');
                }).listen(9758);
                _desired2['default'].customSSLCert = pemCertificate;

              case 12:
              case 'end':
                return context$2$0.stop();
            }
          }, null, this);
        });

        driver = (0, _setupBase2['default'])(this, _desired2['default'], { noReset: true }).driver;

        after(function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                if (!sslServer) {
                  context$2$0.next = 3;
                  break;
                }

                context$2$0.next = 3;
                return _regeneratorRuntime.awrap(sslServer.close());

              case 3:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        });

        it('should be able to access it as long the PEM certificate is provided as a capability', function callee$1$0() {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(_bluebird2['default'].delay(500));

              case 2:
                context$2$0.next = 4;
                return _regeneratorRuntime.awrap(driver.setUrl('https://localhost:9758'));

              case 4:
                context$2$0.next = 6;
                return _regeneratorRuntime.awrap(driver.getPageSource());

              case 6:
                context$2$0.sent.should.include('Arbitrary text');

              case 7:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        });

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
});

// TODO: investigate why this test fails in TRAVIS
//   it seems that the simulator never gets the `Librarys/Keychains/TrustStore.sqlite3`
//   directory that is needed to add the certificate

// Create an HTTPS server with a random pem certificate
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZTJlL3NhZmFyaS93ZWJ2aWV3L3NzbC1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7dUJBQW9CLFdBQVc7Ozs7d0JBQ2pCLFVBQVU7Ozs7cUJBQ04sT0FBTzs7Ozt5QkFDUCxrQkFBa0I7Ozs7QUFHcEMsSUFBTSxHQUFHLEdBQUcsc0JBQUUsWUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDOztBQUUzQyxRQUFRLENBQUMsa0RBQWtELEVBQUU7TUFDdkQsU0FBUyxFQXFCUCxNQUFNOzs7Ozs7QUFyQlIsaUJBQVM7O0FBRWIsY0FBTSxDQUFDO2NBU0QsVUFBVSxFQUNWLElBQUksRUFDSixjQUFjOzs7O3FCQVBkLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTTs7Ozs7QUFDcEIsb0JBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQzs7Ozs7aURBSVMsR0FBRyxDQUFDLHFCQUFxQixFQUFFOzs7QUFBOUMsMEJBQVU7O2lEQUNHLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQyxFQUFDLElBQUksRUFBQyxDQUFDLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBQyxDQUFDOzs7QUFBL0Ysb0JBQUk7QUFDSiw4QkFBYyxHQUFHLElBQUksQ0FBQyxXQUFXOztBQUVyQyx5QkFBUyxHQUFHLG1CQUFNLFlBQVksQ0FBQyxFQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUMsRUFBRSxVQUFVLEdBQUcsRUFBRSxHQUFHLEVBQUU7QUFDL0YscUJBQUcsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztpQkFDM0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNoQixxQ0FBUSxhQUFhLEdBQUcsY0FBYyxDQUFDOzs7Ozs7O1NBQ3hDLENBQUMsQ0FBQzs7QUFFRyxjQUFNLEdBQUcsNEJBQU0sSUFBSSx3QkFBVyxFQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDLE1BQU07O0FBRTNELGFBQUssQ0FBQzs7OztxQkFDQSxTQUFTOzs7Ozs7aURBQ0wsU0FBUyxDQUFDLEtBQUssRUFBRTs7Ozs7OztTQUUxQixDQUFDLENBQUM7O0FBRUgsVUFBRSxDQUFDLHFGQUFxRixFQUFFOzs7OztpREFDbEYsc0JBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQzs7OztpREFDWixNQUFNLENBQUMsTUFBTSxDQUFDLHdCQUF3QixDQUFDOzs7O2lEQUN0QyxNQUFNLENBQUMsYUFBYSxFQUFFOzs7aUNBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0I7Ozs7Ozs7U0FDL0QsQ0FBQyxDQUFDOzs7Ozs7O0NBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvZTJlL3NhZmFyaS93ZWJ2aWV3L3NzbC1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZXNpcmVkIGZyb20gJy4vZGVzaXJlZCc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgaHR0cHMgZnJvbSAnaHR0cHMnO1xuaW1wb3J0IHNldHVwIGZyb20gJy4uLy4uL3NldHVwLWJhc2UnO1xuXG5cbmNvbnN0IHBlbSA9IEIucHJvbWlzaWZ5QWxsKHJlcXVpcmUoJ3BlbScpKTtcblxuZGVzY3JpYmUoJ1doZW4gYWNjZXNzaW5nIGFuIEhUVFBTIGVuY3J5cHRlZCBzaXRlIGluIFNhZmFyaScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgbGV0IHNzbFNlcnZlcjtcblxuICBiZWZvcmUoYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIC8vIFRPRE86IGludmVzdGlnYXRlIHdoeSB0aGlzIHRlc3QgZmFpbHMgaW4gVFJBVklTXG4gICAgLy8gICBpdCBzZWVtcyB0aGF0IHRoZSBzaW11bGF0b3IgbmV2ZXIgZ2V0cyB0aGUgYExpYnJhcnlzL0tleWNoYWlucy9UcnVzdFN0b3JlLnNxbGl0ZTNgXG4gICAgLy8gICBkaXJlY3RvcnkgdGhhdCBpcyBuZWVkZWQgdG8gYWRkIHRoZSBjZXJ0aWZpY2F0ZVxuICAgIGlmIChwcm9jZXNzLmVudi5UUkFWSVMpIHtcbiAgICAgIHRoaXMuc2tpcCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBDcmVhdGUgYW4gSFRUUFMgc2VydmVyIHdpdGggYSByYW5kb20gcGVtIGNlcnRpZmljYXRlXG4gICAgbGV0IHByaXZhdGVLZXkgPSBhd2FpdCBwZW0uY3JlYXRlUHJpdmF0ZUtleUFzeW5jKCk7XG4gICAgbGV0IGtleXMgPSBhd2FpdCBwZW0uY3JlYXRlQ2VydGlmaWNhdGVBc3luYyh7ZGF5czoxLCBzZWxmU2lnbmVkOiB0cnVlLCBzZXJ2aWNlS2V5OiBwcml2YXRlS2V5LmtleX0pO1xuICAgIGxldCBwZW1DZXJ0aWZpY2F0ZSA9IGtleXMuY2VydGlmaWNhdGU7XG5cbiAgICBzc2xTZXJ2ZXIgPSBodHRwcy5jcmVhdGVTZXJ2ZXIoe2tleToga2V5cy5zZXJ2aWNlS2V5LCBjZXJ0OiBwZW1DZXJ0aWZpY2F0ZX0sIGZ1bmN0aW9uIChyZXEsIHJlcykge1xuICAgICAgcmVzLmVuZCgnQXJiaXRyYXJ5IHRleHQnKTtcbiAgICB9KS5saXN0ZW4oOTc1OCk7XG4gICAgZGVzaXJlZC5jdXN0b21TU0xDZXJ0ID0gcGVtQ2VydGlmaWNhdGU7XG4gIH0pO1xuXG4gIGNvbnN0IGRyaXZlciA9IHNldHVwKHRoaXMsIGRlc2lyZWQsIHtub1Jlc2V0OiB0cnVlfSkuZHJpdmVyO1xuXG4gIGFmdGVyKGFzeW5jICgpID0+IHtcbiAgICBpZiAoc3NsU2VydmVyKSB7XG4gICAgICBhd2FpdCBzc2xTZXJ2ZXIuY2xvc2UoKTtcbiAgICB9XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgYmUgYWJsZSB0byBhY2Nlc3MgaXQgYXMgbG9uZyB0aGUgUEVNIGNlcnRpZmljYXRlIGlzIHByb3ZpZGVkIGFzIGEgY2FwYWJpbGl0eScsIGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBCLmRlbGF5KDUwMCk7XG4gICAgYXdhaXQgZHJpdmVyLnNldFVybCgnaHR0cHM6Ly9sb2NhbGhvc3Q6OTc1OCcpO1xuICAgIChhd2FpdCBkcml2ZXIuZ2V0UGFnZVNvdXJjZSgpKS5zaG91bGQuaW5jbHVkZSgnQXJiaXRyYXJ5IHRleHQnKTtcbiAgfSk7XG59KTtcbiJdLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4vLi4ifQ==
