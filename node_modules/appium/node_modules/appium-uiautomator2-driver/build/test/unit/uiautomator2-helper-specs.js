'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _this = this;

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _libHelpers = require('../../lib/helpers');

var helpers = _interopRequireWildcard(_libHelpers);

var _appiumAdb = require('appium-adb');

var _appiumAdb2 = _interopRequireDefault(_appiumAdb);

var _appiumTestSupport = require('appium-test-support');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('UiAutomator2 Driver  Helpers', function () {
  var adb = new _appiumAdb2['default']();

  describe('ensureInternetPermissionForApp', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    var app = '/path/to/app.apk';
    it('should do nothing if app has internet perm', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('hasInternetPermissionFromManifest').once().withExactArgs(app).returns(true);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(helpers.ensureInternetPermissionForApp(adb, app));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should throw an error if app doesnt have internet perms', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('hasInternetPermissionFromManifest').once().withExactArgs(app).returns(false);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(helpers.ensureInternetPermissionForApp(adb, app).should.be.rejectedWith(/INTERNET/));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3RcXHVuaXRcXHVpYXV0b21hdG9yMi1oZWxwZXItc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztvQkFBaUIsTUFBTTs7Ozs4QkFDSSxrQkFBa0I7Ozs7MEJBQ3BCLG1CQUFtQjs7SUFBaEMsT0FBTzs7eUJBQ0gsWUFBWTs7OztpQ0FDRixxQkFBcUI7O0FBRy9DLGtCQUFLLE1BQU0sRUFBRSxDQUFDO0FBQ2Qsa0JBQUssR0FBRyw2QkFBZ0IsQ0FBQzs7QUFFekIsUUFBUSxDQUFDLDhCQUE4QixFQUFFLFlBQU07QUFDN0MsTUFBSSxHQUFHLEdBQUcsNEJBQVMsQ0FBQzs7QUFFcEIsVUFBUSxDQUFDLGdDQUFnQyxFQUFFLGtDQUFVLEVBQUMsR0FBRyxFQUFILEdBQUcsRUFBQyxFQUFFLFVBQUMsS0FBSyxFQUFLO0FBQ3JFLFFBQU0sR0FBRyxHQUFHLGtCQUFrQixDQUFDO0FBQy9CLE1BQUUsQ0FBQyw0Q0FBNEMsRUFBRTs7OztBQUMvQyxpQkFBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsbUNBQW1DLENBQUMsQ0FDakQsSUFBSSxFQUFFLENBQ04sYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUNsQixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7OzZDQUNiLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDOzs7QUFDdEQsaUJBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUM7Ozs7Ozs7S0FDcEIsQ0FBQyxDQUFDO0FBQ0gsTUFBRSxDQUFDLHlEQUF5RCxFQUFFOzs7O0FBQzVELGlCQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxtQ0FBbUMsQ0FBQyxDQUNqRCxJQUFJLEVBQUUsQ0FDTixhQUFhLENBQUMsR0FBRyxDQUFDLENBQ2xCLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQzs7NkNBQ2QsT0FBTyxDQUFDLDhCQUE4QixDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FDakQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDOzs7QUFDdkMsaUJBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUM7Ozs7Ozs7S0FDcEIsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDLENBQUM7Q0FDTCxDQUFDLENBQUMiLCJmaWxlIjoidGVzdFxcdW5pdFxcdWlhdXRvbWF0b3IyLWhlbHBlci1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xyXG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XHJcbmltcG9ydCAqIGFzIGhlbHBlcnMgZnJvbSAnLi4vLi4vbGliL2hlbHBlcnMnO1xyXG5pbXBvcnQgQURCIGZyb20gJ2FwcGl1bS1hZGInO1xyXG5pbXBvcnQgeyB3aXRoTW9ja3MgfSBmcm9tICdhcHBpdW0tdGVzdC1zdXBwb3J0JztcclxuXHJcblxyXG5jaGFpLnNob3VsZCgpO1xyXG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XHJcblxyXG5kZXNjcmliZSgnVWlBdXRvbWF0b3IyIERyaXZlciAgSGVscGVycycsICgpID0+IHtcclxuICBsZXQgYWRiID0gbmV3IEFEQigpO1xyXG5cclxuICBkZXNjcmliZSgnZW5zdXJlSW50ZXJuZXRQZXJtaXNzaW9uRm9yQXBwJywgd2l0aE1vY2tzKHthZGJ9LCAobW9ja3MpID0+IHtcclxuICAgIGNvbnN0IGFwcCA9ICcvcGF0aC90by9hcHAuYXBrJztcclxuICAgIGl0KCdzaG91bGQgZG8gbm90aGluZyBpZiBhcHAgaGFzIGludGVybmV0IHBlcm0nLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIG1vY2tzLmFkYi5leHBlY3RzKCdoYXNJbnRlcm5ldFBlcm1pc3Npb25Gcm9tTWFuaWZlc3QnKVxyXG4gICAgICAgICAgLm9uY2UoKVxyXG4gICAgICAgICAgLndpdGhFeGFjdEFyZ3MoYXBwKVxyXG4gICAgICAgICAgLnJldHVybnModHJ1ZSk7XHJcbiAgICAgIGF3YWl0IGhlbHBlcnMuZW5zdXJlSW50ZXJuZXRQZXJtaXNzaW9uRm9yQXBwKGFkYiwgYXBwKTtcclxuICAgICAgbW9ja3MuYWRiLnZlcmlmeSgpO1xyXG4gICAgfSk7XHJcbiAgICBpdCgnc2hvdWxkIHRocm93IGFuIGVycm9yIGlmIGFwcCBkb2VzbnQgaGF2ZSBpbnRlcm5ldCBwZXJtcycsIGFzeW5jICgpID0+IHtcclxuICAgICAgbW9ja3MuYWRiLmV4cGVjdHMoJ2hhc0ludGVybmV0UGVybWlzc2lvbkZyb21NYW5pZmVzdCcpXHJcbiAgICAgICAgICAub25jZSgpXHJcbiAgICAgICAgICAud2l0aEV4YWN0QXJncyhhcHApXHJcbiAgICAgICAgICAucmV0dXJucyhmYWxzZSk7XHJcbiAgICAgIGF3YWl0IGhlbHBlcnMuZW5zdXJlSW50ZXJuZXRQZXJtaXNzaW9uRm9yQXBwKGFkYiwgYXBwKVxyXG4gICAgICAgICAgLnNob3VsZC5iZS5yZWplY3RlZFdpdGgoL0lOVEVSTkVULyk7XHJcbiAgICAgIG1vY2tzLmFkYi52ZXJpZnkoKTtcclxuICAgIH0pO1xyXG4gIH0pKTtcclxufSk7XHJcbiJdfQ==