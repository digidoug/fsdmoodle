'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _2 = require('../../..');

var _3 = _interopRequireDefault(_2);

var _sampleApps = require('sample-apps');

var _sampleApps2 = _interopRequireDefault(_sampleApps);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _stream = require('stream');

var _stream2 = _interopRequireDefault(_stream);

var _unzip = require('unzip');

var _unzip2 = _interopRequireDefault(_unzip);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

var driver = undefined;
var caps = {
  app: (0, _sampleApps2['default'])('ApiDemos-debug'),
  deviceName: 'Android',
  platformName: 'Android',
  autoLaunch: false
};

describe('file movement', function () {
  var _this = this;

  before(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          driver = new _3['default']();
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(driver.createSession(caps));

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  after(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(driver.deleteSession());

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  function getRandomDir() {
    return '/data/local/tmp/test' + Math.random();
  }

  it('should push and pull a file', function callee$1$0() {
    var stringData, base64Data, remotePath, remoteData64, remoteData;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          stringData = 'random string data ' + Math.random();
          base64Data = new Buffer(stringData).toString('base64');
          remotePath = getRandomDir() + '/remote.txt';
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(driver.pushFile(remotePath, base64Data));

        case 5:
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(driver.pullFile(remotePath));

        case 7:
          remoteData64 = context$2$0.sent;
          remoteData = new Buffer(remoteData64, 'base64').toString();

          remoteData.should.equal(stringData);

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should pull a folder', function callee$1$0() {
    var stringData, base64Data, remoteDir, data, zipPromise;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          stringData = 'random string data ' + Math.random();
          base64Data = new Buffer(stringData).toString('base64');
          remoteDir = getRandomDir();
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(driver.pushFile(remoteDir + '/remote0.txt', base64Data));

        case 5:
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(driver.pushFile(remoteDir + '/remote1.txt', base64Data));

        case 7:
          context$2$0.next = 9;
          return _regeneratorRuntime.awrap(driver.pullFolder(remoteDir));

        case 9:
          data = context$2$0.sent;
          zipPromise = new _bluebird2['default'](function (resolve) {
            var entryCount = 0;
            var zipStream = new _stream2['default'].Readable();
            zipStream._read = _lodash2['default'].noop;
            zipStream.pipe(_unzip2['default'].Parse()).on('entry', function (entry) {
              entryCount++;
              entry.autodrain();
            }).on('close', function () {
              resolve(entryCount);
            });
            zipStream.push(data, 'base64');
            zipStream.push(null);
          });
          context$2$0.next = 13;
          return _regeneratorRuntime.awrap(zipPromise);

        case 13:
          context$2$0.sent.should.equal(2);

        case 14:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});

// get the file and its contents, to check

// send the files, then pull the whole folder

// go through the folder we pulled and make sure the
// two files we pushed are in it
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3RcXGZ1bmN0aW9uYWxcXGNvbW1hbmRzXFxmaWxlLW1vdmVtZW50LWUyZS1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7b0JBQWlCLE1BQU07Ozs7OEJBQ0ksa0JBQWtCOzs7O2lCQUNQLFVBQVU7Ozs7MEJBQ3pCLGFBQWE7Ozs7c0JBQ3RCLFFBQVE7Ozs7d0JBQ1IsVUFBVTs7OztzQkFDTCxRQUFROzs7O3FCQUNULE9BQU87Ozs7QUFHekIsa0JBQUssTUFBTSxFQUFFLENBQUM7QUFDZCxrQkFBSyxHQUFHLDZCQUFnQixDQUFDOztBQUV6QixJQUFJLE1BQU0sWUFBQSxDQUFDO0FBQ1gsSUFBSSxJQUFJLEdBQUc7QUFDVCxLQUFHLEVBQUUsNkJBQVcsZ0JBQWdCLENBQUM7QUFDakMsWUFBVSxFQUFFLFNBQVM7QUFDckIsY0FBWSxFQUFFLFNBQVM7QUFDdkIsWUFBVSxFQUFFLEtBQUs7Q0FDbEIsQ0FBQzs7QUFFRixRQUFRLENBQUMsZUFBZSxFQUFFLFlBQVk7OztBQUNwQyxRQUFNLENBQUM7Ozs7QUFDTCxnQkFBTSxHQUFHLG1CQUErQixDQUFDOzsyQ0FDbkMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUM7Ozs7Ozs7R0FDakMsQ0FBQyxDQUFDO0FBQ0gsT0FBSyxDQUFDOzs7OzsyQ0FDRSxNQUFNLENBQUMsYUFBYSxFQUFFOzs7Ozs7O0dBQzdCLENBQUMsQ0FBQzs7QUFFSCxXQUFTLFlBQVksR0FBSTtBQUN2QixvQ0FBOEIsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFHO0dBQy9DOztBQUVELElBQUUsQ0FBQyw2QkFBNkIsRUFBRTtRQUM1QixVQUFVLEVBQ1YsVUFBVSxFQUNWLFVBQVUsRUFLVixZQUFZLEVBQ1osVUFBVTs7OztBQVJWLG9CQUFVLDJCQUF5QixJQUFJLENBQUMsTUFBTSxFQUFFO0FBQ2hELG9CQUFVLEdBQUcsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQztBQUN0RCxvQkFBVSxHQUFNLFlBQVksRUFBRTs7MkNBRTVCLE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQzs7OzsyQ0FHcEIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUM7OztBQUFoRCxzQkFBWTtBQUNaLG9CQUFVLEdBQUcsSUFBSSxNQUFNLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDLFFBQVEsRUFBRTs7QUFDOUQsb0JBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDOzs7Ozs7O0dBQ3JDLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsc0JBQXNCLEVBQUU7UUFDckIsVUFBVSxFQUNWLFVBQVUsRUFHVixTQUFTLEVBR1QsSUFBSSxFQUlKLFVBQVU7Ozs7QUFYVixvQkFBVSwyQkFBeUIsSUFBSSxDQUFDLE1BQU0sRUFBRTtBQUNoRCxvQkFBVSxHQUFHLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7QUFHdEQsbUJBQVMsR0FBRyxZQUFZLEVBQUU7OzJDQUN4QixNQUFNLENBQUMsUUFBUSxDQUFJLFNBQVMsbUJBQWdCLFVBQVUsQ0FBQzs7OzsyQ0FDdkQsTUFBTSxDQUFDLFFBQVEsQ0FBSSxTQUFTLG1CQUFnQixVQUFVLENBQUM7Ozs7MkNBQzVDLE1BQU0sQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDOzs7QUFBekMsY0FBSTtBQUlKLG9CQUFVLEdBQUcsMEJBQU0sVUFBQyxPQUFPLEVBQUs7QUFDbEMsZ0JBQUksVUFBVSxHQUFHLENBQUMsQ0FBQztBQUNuQixnQkFBSSxTQUFTLEdBQUcsSUFBSSxvQkFBTyxRQUFRLEVBQUUsQ0FBQztBQUN0QyxxQkFBUyxDQUFDLEtBQUssR0FBRyxvQkFBRSxJQUFJLENBQUM7QUFDekIscUJBQVMsQ0FDTixJQUFJLENBQUMsbUJBQU0sS0FBSyxFQUFFLENBQUMsQ0FDbkIsRUFBRSxDQUFDLE9BQU8sRUFBRSxVQUFVLEtBQUssRUFBRTtBQUM1Qix3QkFBVSxFQUFFLENBQUM7QUFDYixtQkFBSyxDQUFDLFNBQVMsRUFBRSxDQUFDO2FBQ25CLENBQUMsQ0FDRCxFQUFFLENBQUMsT0FBTyxFQUFFLFlBQVk7QUFDdkIscUJBQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUNyQixDQUFDLENBQUM7QUFDTCxxQkFBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDL0IscUJBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7V0FDdEIsQ0FBQzs7MkNBRUssVUFBVTs7OzJCQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQzs7Ozs7OztHQUNsQyxDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdFxcZnVuY3Rpb25hbFxcY29tbWFuZHNcXGZpbGUtbW92ZW1lbnQtZTJlLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XHJcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcclxuaW1wb3J0IEFuZHJvaWRVaWF1dG9tYXRvcjJEcml2ZXIgZnJvbSAnLi4vLi4vLi4nO1xyXG5pbXBvcnQgc2FtcGxlQXBwcyBmcm9tICdzYW1wbGUtYXBwcyc7XHJcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XHJcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcclxuaW1wb3J0IHN0cmVhbSBmcm9tICdzdHJlYW0nO1xyXG5pbXBvcnQgVW56aXAgZnJvbSAndW56aXAnO1xyXG5cclxuXHJcbmNoYWkuc2hvdWxkKCk7XHJcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcclxuXHJcbmxldCBkcml2ZXI7XHJcbmxldCBjYXBzID0ge1xyXG4gIGFwcDogc2FtcGxlQXBwcygnQXBpRGVtb3MtZGVidWcnKSxcclxuICBkZXZpY2VOYW1lOiAnQW5kcm9pZCcsXHJcbiAgcGxhdGZvcm1OYW1lOiAnQW5kcm9pZCcsXHJcbiAgYXV0b0xhdW5jaDogZmFsc2VcclxufTtcclxuXHJcbmRlc2NyaWJlKCdmaWxlIG1vdmVtZW50JywgZnVuY3Rpb24gKCkge1xyXG4gIGJlZm9yZShhc3luYyAoKSA9PiB7XHJcbiAgICBkcml2ZXIgPSBuZXcgQW5kcm9pZFVpYXV0b21hdG9yMkRyaXZlcigpO1xyXG4gICAgYXdhaXQgZHJpdmVyLmNyZWF0ZVNlc3Npb24oY2Fwcyk7XHJcbiAgfSk7XHJcbiAgYWZ0ZXIoYXN5bmMgKCkgPT4ge1xyXG4gICAgYXdhaXQgZHJpdmVyLmRlbGV0ZVNlc3Npb24oKTtcclxuICB9KTtcclxuXHJcbiAgZnVuY3Rpb24gZ2V0UmFuZG9tRGlyICgpIHtcclxuICAgIHJldHVybiBgL2RhdGEvbG9jYWwvdG1wL3Rlc3Qke01hdGgucmFuZG9tKCl9YDtcclxuICB9XHJcblxyXG4gIGl0KCdzaG91bGQgcHVzaCBhbmQgcHVsbCBhIGZpbGUnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBsZXQgc3RyaW5nRGF0YSA9IGByYW5kb20gc3RyaW5nIGRhdGEgJHtNYXRoLnJhbmRvbSgpfWA7XHJcbiAgICBsZXQgYmFzZTY0RGF0YSA9IG5ldyBCdWZmZXIoc3RyaW5nRGF0YSkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xyXG4gICAgbGV0IHJlbW90ZVBhdGggPSBgJHtnZXRSYW5kb21EaXIoKX0vcmVtb3RlLnR4dGA7XHJcblxyXG4gICAgYXdhaXQgZHJpdmVyLnB1c2hGaWxlKHJlbW90ZVBhdGgsIGJhc2U2NERhdGEpO1xyXG5cclxuICAgIC8vIGdldCB0aGUgZmlsZSBhbmQgaXRzIGNvbnRlbnRzLCB0byBjaGVja1xyXG4gICAgbGV0IHJlbW90ZURhdGE2NCA9IGF3YWl0IGRyaXZlci5wdWxsRmlsZShyZW1vdGVQYXRoKTtcclxuICAgIGxldCByZW1vdGVEYXRhID0gbmV3IEJ1ZmZlcihyZW1vdGVEYXRhNjQsICdiYXNlNjQnKS50b1N0cmluZygpO1xyXG4gICAgcmVtb3RlRGF0YS5zaG91bGQuZXF1YWwoc3RyaW5nRGF0YSk7XHJcbiAgfSk7XHJcblxyXG4gIGl0KCdzaG91bGQgcHVsbCBhIGZvbGRlcicsIGFzeW5jICgpID0+IHtcclxuICAgIGxldCBzdHJpbmdEYXRhID0gYHJhbmRvbSBzdHJpbmcgZGF0YSAke01hdGgucmFuZG9tKCl9YDtcclxuICAgIGxldCBiYXNlNjREYXRhID0gbmV3IEJ1ZmZlcihzdHJpbmdEYXRhKS50b1N0cmluZygnYmFzZTY0Jyk7XHJcblxyXG4gICAgLy8gc2VuZCB0aGUgZmlsZXMsIHRoZW4gcHVsbCB0aGUgd2hvbGUgZm9sZGVyXHJcbiAgICBsZXQgcmVtb3RlRGlyID0gZ2V0UmFuZG9tRGlyKCk7XHJcbiAgICBhd2FpdCBkcml2ZXIucHVzaEZpbGUoYCR7cmVtb3RlRGlyfS9yZW1vdGUwLnR4dGAsIGJhc2U2NERhdGEpO1xyXG4gICAgYXdhaXQgZHJpdmVyLnB1c2hGaWxlKGAke3JlbW90ZURpcn0vcmVtb3RlMS50eHRgLCBiYXNlNjREYXRhKTtcclxuICAgIGxldCBkYXRhID0gYXdhaXQgZHJpdmVyLnB1bGxGb2xkZXIocmVtb3RlRGlyKTtcclxuXHJcbiAgICAvLyBnbyB0aHJvdWdoIHRoZSBmb2xkZXIgd2UgcHVsbGVkIGFuZCBtYWtlIHN1cmUgdGhlXHJcbiAgICAvLyB0d28gZmlsZXMgd2UgcHVzaGVkIGFyZSBpbiBpdFxyXG4gICAgbGV0IHppcFByb21pc2UgPSBuZXcgQigocmVzb2x2ZSkgPT4ge1xyXG4gICAgICBsZXQgZW50cnlDb3VudCA9IDA7XHJcbiAgICAgIGxldCB6aXBTdHJlYW0gPSBuZXcgc3RyZWFtLlJlYWRhYmxlKCk7XHJcbiAgICAgIHppcFN0cmVhbS5fcmVhZCA9IF8ubm9vcDtcclxuICAgICAgemlwU3RyZWFtXHJcbiAgICAgICAgLnBpcGUoVW56aXAuUGFyc2UoKSlcclxuICAgICAgICAub24oJ2VudHJ5JywgZnVuY3Rpb24gKGVudHJ5KSB7XHJcbiAgICAgICAgICBlbnRyeUNvdW50Kys7XHJcbiAgICAgICAgICBlbnRyeS5hdXRvZHJhaW4oKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5vbignY2xvc2UnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICByZXNvbHZlKGVudHJ5Q291bnQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB6aXBTdHJlYW0ucHVzaChkYXRhLCAnYmFzZTY0Jyk7XHJcbiAgICAgIHppcFN0cmVhbS5wdXNoKG51bGwpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgKGF3YWl0IHppcFByb21pc2UpLnNob3VsZC5lcXVhbCgyKTtcclxuICB9KTtcclxufSk7XHJcbiJdfQ==