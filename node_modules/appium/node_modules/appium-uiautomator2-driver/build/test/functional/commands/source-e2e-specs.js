'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _ = require('../../..');

var _2 = _interopRequireDefault(_);

var _sampleApps = require('sample-apps');

var _sampleApps2 = _interopRequireDefault(_sampleApps);

var _xmldom = require('xmldom');

var _xpath = require('xpath');

var _xpath2 = _interopRequireDefault(_xpath);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

var driver = undefined;
var caps = {
  app: (0, _sampleApps2['default'])('ApiDemos-debug'),
  deviceName: 'Android',
  platformName: 'Android'
};
var assertSource = function assertSource(source) {
  var dom, nodes;
  return _regeneratorRuntime.async(function assertSource$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        source.should.exist;
        dom = new _xmldom.DOMParser().parseFromString(source);
        nodes = _xpath2['default'].select('//android.widget.TextView[@content-desc="App"]', dom);

        nodes.length.should.equal(1);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, _this);
};

describe('apidemo - source', function () {
  var _this2 = this;

  before(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          driver = new _2['default']();
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(driver.createSession(caps));

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this2);
  });
  after(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(driver.deleteSession());

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this2);
  });
  it('should return the page source', function callee$1$0() {
    var source;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(driver.getPageSource());

        case 2:
          source = context$2$0.sent;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(assertSource(source));

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this2);
  });
  it('should get less source when compression is enabled', function callee$1$0() {
    var getSourceWithoutCompression, getSourceWithCompression, sourceWithoutCompression, sourceWithCompression;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      var _this3 = this;

      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          getSourceWithoutCompression = function getSourceWithoutCompression() {
            return _regeneratorRuntime.async(function getSourceWithoutCompression$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap(driver.updateSettings({ 'ignoreUnimportantViews': false }));

                case 2:
                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap(driver.getPageSource());

                case 4:
                  return context$3$0.abrupt('return', context$3$0.sent);

                case 5:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this3);
          };

          getSourceWithCompression = function getSourceWithCompression() {
            return _regeneratorRuntime.async(function getSourceWithCompression$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap(driver.updateSettings({ "ignoreUnimportantViews": true }));

                case 2:
                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap(driver.getPageSource());

                case 4:
                  return context$3$0.abrupt('return', context$3$0.sent);

                case 5:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this3);
          };

          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(getSourceWithoutCompression());

        case 4:
          sourceWithoutCompression = context$2$0.sent;
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(getSourceWithCompression());

        case 7:
          sourceWithCompression = context$2$0.sent;

          sourceWithoutCompression.length.should.be.greaterThan(sourceWithCompression.length);

        case 9:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this2);
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3RcXGZ1bmN0aW9uYWxcXGNvbW1hbmRzXFxzb3VyY2UtZTJlLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O29CQUFpQixNQUFNOzs7OzhCQUNJLGtCQUFrQjs7OztnQkFDUCxVQUFVOzs7OzBCQUN6QixhQUFhOzs7O3NCQUNWLFFBQVE7O3FCQUNoQixPQUFPOzs7O0FBRXpCLGtCQUFLLE1BQU0sRUFBRSxDQUFDO0FBQ2Qsa0JBQUssR0FBRyw2QkFBZ0IsQ0FBQzs7QUFFekIsSUFBSSxNQUFNLFlBQUEsQ0FBQztBQUNYLElBQUksSUFBSSxHQUFHO0FBQ1QsS0FBRyxFQUFFLDZCQUFXLGdCQUFnQixDQUFDO0FBQ2pDLFlBQVUsRUFBRSxTQUFTO0FBQ3JCLGNBQVksRUFBRSxTQUFTO0NBQ3hCLENBQUM7QUFDRixJQUFJLFlBQVksR0FBRyxTQUFmLFlBQVksQ0FBVSxNQUFNO01BRTFCLEdBQUcsRUFDSCxLQUFLOzs7O0FBRlQsY0FBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDaEIsV0FBRyxHQUFHLHVCQUFlLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQztBQUM3QyxhQUFLLEdBQUcsbUJBQU0sTUFBTSxDQUFDLGdEQUFnRCxFQUFFLEdBQUcsQ0FBQzs7QUFDL0UsYUFBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDOzs7Ozs7O0NBQzlCLENBQUM7O0FBRUYsUUFBUSxDQUFDLGtCQUFrQixFQUFFLFlBQVk7OztBQUN2QyxRQUFNLENBQUM7Ozs7QUFDTCxnQkFBTSxHQUFHLG1CQUErQixDQUFDOzsyQ0FDbkMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUM7Ozs7Ozs7R0FDakMsQ0FBQyxDQUFDO0FBQ0gsT0FBSyxDQUFDOzs7OzsyQ0FDRSxNQUFNLENBQUMsYUFBYSxFQUFFOzs7Ozs7O0dBQzdCLENBQUMsQ0FBQztBQUNILElBQUUsQ0FBQywrQkFBK0IsRUFBRTtRQUM5QixNQUFNOzs7OzsyQ0FBUyxNQUFNLENBQUMsYUFBYSxFQUFFOzs7QUFBckMsZ0JBQU07OzJDQUNKLFlBQVksQ0FBQyxNQUFNLENBQUM7Ozs7Ozs7R0FDM0IsQ0FBQyxDQUFDO0FBQ0gsSUFBRSxDQUFDLG9EQUFvRCxFQUFFO1FBQ25ELDJCQUEyQixFQUkzQix3QkFBd0IsRUFJeEIsd0JBQXdCLEVBQ3hCLHFCQUFxQjs7Ozs7O0FBVHJCLHFDQUEyQixHQUFHLFNBQTlCLDJCQUEyQjs7Ozs7bURBQ3ZCLE1BQU0sQ0FBQyxjQUFjLENBQUMsRUFBQyx3QkFBd0IsRUFBRSxLQUFLLEVBQUMsQ0FBQzs7OzttREFDakQsTUFBTSxDQUFDLGFBQWEsRUFBRTs7Ozs7Ozs7OztXQUNwQzs7QUFDRyxrQ0FBd0IsR0FBRyxTQUEzQix3QkFBd0I7Ozs7O21EQUNwQixNQUFNLENBQUMsY0FBYyxDQUFDLEVBQUMsd0JBQXdCLEVBQUUsSUFBSSxFQUFDLENBQUM7Ozs7bURBQ2hELE1BQU0sQ0FBQyxhQUFhLEVBQUU7Ozs7Ozs7Ozs7V0FDcEM7OzsyQ0FDb0MsMkJBQTJCLEVBQUU7OztBQUE5RCxrQ0FBd0I7OzJDQUNNLHdCQUF3QixFQUFFOzs7QUFBeEQsK0JBQXFCOztBQUN6QixrQ0FBd0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMscUJBQXFCLENBQUMsTUFBTSxDQUFDLENBQUM7Ozs7Ozs7R0FDckYsQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3RcXGZ1bmN0aW9uYWxcXGNvbW1hbmRzXFxzb3VyY2UtZTJlLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XHJcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcclxuaW1wb3J0IEFuZHJvaWRVaWF1dG9tYXRvcjJEcml2ZXIgZnJvbSAnLi4vLi4vLi4nO1xyXG5pbXBvcnQgc2FtcGxlQXBwcyBmcm9tICdzYW1wbGUtYXBwcyc7XHJcbmltcG9ydCB7IERPTVBhcnNlciB9IGZyb20gJ3htbGRvbSc7XHJcbmltcG9ydCB4cGF0aCBmcm9tICd4cGF0aCc7XHJcblxyXG5jaGFpLnNob3VsZCgpO1xyXG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XHJcblxyXG5sZXQgZHJpdmVyO1xyXG5sZXQgY2FwcyA9IHtcclxuICBhcHA6IHNhbXBsZUFwcHMoJ0FwaURlbW9zLWRlYnVnJyksXHJcbiAgZGV2aWNlTmFtZTogJ0FuZHJvaWQnLFxyXG4gIHBsYXRmb3JtTmFtZTogJ0FuZHJvaWQnLFxyXG59O1xyXG5sZXQgYXNzZXJ0U291cmNlID0gYXN5bmMgKHNvdXJjZSkgPT4ge1xyXG4gIHNvdXJjZS5zaG91bGQuZXhpc3Q7XHJcbiAgbGV0IGRvbSA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoc291cmNlKTtcclxuICBsZXQgbm9kZXMgPSB4cGF0aC5zZWxlY3QoJy8vYW5kcm9pZC53aWRnZXQuVGV4dFZpZXdbQGNvbnRlbnQtZGVzYz1cIkFwcFwiXScsIGRvbSk7XHJcbiAgbm9kZXMubGVuZ3RoLnNob3VsZC5lcXVhbCgxKTtcclxufTtcclxuXHJcbmRlc2NyaWJlKCdhcGlkZW1vIC0gc291cmNlJywgZnVuY3Rpb24gKCkge1xyXG4gIGJlZm9yZShhc3luYyAoKSA9PiB7XHJcbiAgICBkcml2ZXIgPSBuZXcgQW5kcm9pZFVpYXV0b21hdG9yMkRyaXZlcigpO1xyXG4gICAgYXdhaXQgZHJpdmVyLmNyZWF0ZVNlc3Npb24oY2Fwcyk7XHJcbiAgfSk7XHJcbiAgYWZ0ZXIoYXN5bmMgKCkgPT4ge1xyXG4gICAgYXdhaXQgZHJpdmVyLmRlbGV0ZVNlc3Npb24oKTtcclxuICB9KTtcclxuICBpdCgnc2hvdWxkIHJldHVybiB0aGUgcGFnZSBzb3VyY2UnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBsZXQgc291cmNlID0gYXdhaXQgZHJpdmVyLmdldFBhZ2VTb3VyY2UoKTtcclxuICAgIGF3YWl0IGFzc2VydFNvdXJjZShzb3VyY2UpO1xyXG4gIH0pO1xyXG4gIGl0KCdzaG91bGQgZ2V0IGxlc3Mgc291cmNlIHdoZW4gY29tcHJlc3Npb24gaXMgZW5hYmxlZCcsIGFzeW5jICgpID0+IHtcclxuICAgIGxldCBnZXRTb3VyY2VXaXRob3V0Q29tcHJlc3Npb24gPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGF3YWl0IGRyaXZlci51cGRhdGVTZXR0aW5ncyh7J2lnbm9yZVVuaW1wb3J0YW50Vmlld3MnOiBmYWxzZX0pO1xyXG4gICAgICByZXR1cm4gYXdhaXQgZHJpdmVyLmdldFBhZ2VTb3VyY2UoKTtcclxuICAgIH07XHJcbiAgICBsZXQgZ2V0U291cmNlV2l0aENvbXByZXNzaW9uID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgICBhd2FpdCBkcml2ZXIudXBkYXRlU2V0dGluZ3Moe1wiaWdub3JlVW5pbXBvcnRhbnRWaWV3c1wiOiB0cnVlfSk7XHJcbiAgICAgIHJldHVybiBhd2FpdCBkcml2ZXIuZ2V0UGFnZVNvdXJjZSgpO1xyXG4gICAgfTtcclxuICAgIGxldCBzb3VyY2VXaXRob3V0Q29tcHJlc3Npb24gPSBhd2FpdCBnZXRTb3VyY2VXaXRob3V0Q29tcHJlc3Npb24oKTtcclxuICAgIGxldCBzb3VyY2VXaXRoQ29tcHJlc3Npb24gPSBhd2FpdCBnZXRTb3VyY2VXaXRoQ29tcHJlc3Npb24oKTtcclxuICAgIHNvdXJjZVdpdGhvdXRDb21wcmVzc2lvbi5sZW5ndGguc2hvdWxkLmJlLmdyZWF0ZXJUaGFuKHNvdXJjZVdpdGhDb21wcmVzc2lvbi5sZW5ndGgpO1xyXG4gIH0pO1xyXG59KTtcclxuIl19