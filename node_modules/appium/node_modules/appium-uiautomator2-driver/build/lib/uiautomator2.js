'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _teen_process = require('teen_process');

var _appiumBaseDriver = require('appium-base-driver');

var _asyncbox = require('asyncbox');

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _installer = require('./installer');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var REQD_PARAMS = ['adb', 'tmpDir', 'host', 'systemPort', 'devicePort'];

var adbkit = require('adbkit');
var client = adbkit.createClient();

var UiAutomator2Server = (function () {
  function UiAutomator2Server() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, UiAutomator2Server);

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = _getIterator(REQD_PARAMS), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var req = _step.value;

        if (!opts || !opts[req]) {
          throw new Error('Option \'' + req + '\' is required!');
        }
        this[req] = opts[req];
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    this.jwproxy = new _appiumBaseDriver.JWProxy({ host: this.host, port: this.systemPort });
    this.proxyReqRes = this.jwproxy.proxyReqRes.bind(this.jwproxy);
  }

  _createClass(UiAutomator2Server, [{
    key: 'installServerApk',
    value: function installServerApk() {
      var apkPackage, testApkPackage, isApkInstalled, isTestApkInstalled, apkVersion, pkgVersion;
      return _regeneratorRuntime.async(function installServerApk$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getPackageName(_installer.UI2_SERVER_APK_PATH));

          case 2:
            apkPackage = context$2$0.sent;
            testApkPackage = apkPackage + '.test';
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.adb.isAppInstalled(apkPackage));

          case 6:
            isApkInstalled = context$2$0.sent;
            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(this.adb.isAppInstalled(testApkPackage));

          case 9:
            isTestApkInstalled = context$2$0.sent;

            if (!(isApkInstalled || isTestApkInstalled)) {
              context$2$0.next = 24;
              break;
            }

            context$2$0.next = 13;
            return _regeneratorRuntime.awrap(this.getAPKVersion(_installer.UI2_SERVER_APK_PATH));

          case 13:
            apkVersion = context$2$0.sent;
            context$2$0.next = 16;
            return _regeneratorRuntime.awrap(this.getInstalledPackageVersion(apkPackage));

          case 16:
            pkgVersion = context$2$0.sent;

            if (!(apkVersion !== pkgVersion)) {
              context$2$0.next = 24;
              break;
            }

            isApkInstalled = false;
            isTestApkInstalled = false;
            context$2$0.next = 22;
            return _regeneratorRuntime.awrap(this.adb.uninstallApk(apkPackage));

          case 22:
            context$2$0.next = 24;
            return _regeneratorRuntime.awrap(this.adb.uninstallApk(testApkPackage));

          case 24:
            if (isApkInstalled) {
              context$2$0.next = 27;
              break;
            }

            context$2$0.next = 27;
            return _regeneratorRuntime.awrap(this.signAndInstall(_installer.UI2_SERVER_APK_PATH, apkPackage));

          case 27:
            if (isTestApkInstalled) {
              context$2$0.next = 30;
              break;
            }

            context$2$0.next = 30;
            return _regeneratorRuntime.awrap(this.signAndInstall(_installer.UI2_TEST_APK_PATH, testApkPackage));

          case 30:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'signAndInstall',
    value: function signAndInstall(apk, apkPackage) {
      return _regeneratorRuntime.async(function signAndInstall$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.checkAndSignCert(apk, apkPackage));

          case 2:
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.adb.install(apk));

          case 4:
            _logger2['default'].info("Installed UiAutomator2 server apk");

          case 5:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getPackageName',
    value: function getPackageName(apk) {
      var args, _ref, stdout, apkPackage;

      return _regeneratorRuntime.async(function getPackageName$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            args = ['dump', 'badging', apk];
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.adb.initAapt());

          case 3:
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap((0, _teen_process.exec)(this.adb.binaries.aapt, args));

          case 5:
            _ref = context$2$0.sent;
            stdout = _ref.stdout;
            apkPackage = new RegExp(/package: name='([^']+)'/g).exec(stdout);

            if (apkPackage && apkPackage.length >= 2) {
              apkPackage = apkPackage[1];
            } else {
              apkPackage = null;
            }
            return context$2$0.abrupt('return', apkPackage);

          case 10:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getAPKVersion',
    value: function getAPKVersion(apk) {
      var args, _ref2, stdout, apkVersion;

      return _regeneratorRuntime.async(function getAPKVersion$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            args = ['dump', 'badging', apk];
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.adb.initAapt());

          case 3:
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap((0, _teen_process.exec)(this.adb.binaries.aapt, args));

          case 5:
            _ref2 = context$2$0.sent;
            stdout = _ref2.stdout;
            apkVersion = new RegExp(/versionName='([^']+)'/g).exec(stdout);

            if (apkVersion && apkVersion.length >= 2) {
              apkVersion = apkVersion[1];
            } else {
              apkVersion = null;
            }
            return context$2$0.abrupt('return', apkVersion.toString());

          case 10:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getInstalledPackageVersion',
    value: function getInstalledPackageVersion(pkg) {
      var stdout, pkgVersion;
      return _regeneratorRuntime.async(function getInstalledPackageVersion$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.adb.shell(['dumpsys', 'package', pkg]));

          case 2:
            stdout = context$2$0.sent;
            pkgVersion = new RegExp(/versionName=([^\s\s]+)/g).exec(stdout);

            if (pkgVersion && pkgVersion.length >= 2) {
              pkgVersion = pkgVersion[1];
            } else {
              pkgVersion = null;
            }
            return context$2$0.abrupt('return', pkgVersion.toString());

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'checkAndSignCert',
    value: function checkAndSignCert(apk, apkPackage) {
      var signed;
      return _regeneratorRuntime.async(function checkAndSignCert$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.adb.checkApkCert(apk, apkPackage));

          case 2:
            signed = context$2$0.sent;

            if (signed) {
              context$2$0.next = 6;
              break;
            }

            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.adb.sign(apk));

          case 6:
            return context$2$0.abrupt('return', !signed);

          case 7:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startSession',
    value: function startSession(caps) {
      var cmd;
      return _regeneratorRuntime.async(function startSession$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            cmd = ['am', 'instrument', '-w', 'io.appium.uiautomator2.server.test/android.support.test.runner.AndroidJUnitRunner'];
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.killUiAutomatorOnDevice());

          case 3:

            _logger2['default'].info('Starting uiautomator2 server ' + _installer.UI2_VER + ' with cmd: ' + ('' + cmd));
            //this.adb.shell(cmd);
            //using 3rd party module called 'adbKit' for time being as using 'appium-adb'
            //facing IllegalStateException: UiAutomation not connected exception
            //https://github.com/appium/appium-uiautomator2-driver/issues/19

            if (caps.deviceUDID) {
              this.startSessionOnSpecificDeviceUsingAdbKit(caps.deviceUDID);
            } else {
              this.startSessionUsingAdbkit();
            }

            _logger2['default'].info('Waiting for UiAutomator2 to be online...');
            // wait 20s for UiAutomator2 to be online
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(20, 1000, function callee$2$0() {
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    context$3$0.next = 2;
                    return _regeneratorRuntime.awrap(this.jwproxy.command('/status', 'GET'));

                  case 2:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this);
            }));

          case 8:
            context$2$0.next = 10;
            return _regeneratorRuntime.awrap(this.jwproxy.command('/session', 'POST', { desiredCapabilities: caps }));

          case 10:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startSessionOnSpecificDeviceUsingAdbKit',
    value: function startSessionOnSpecificDeviceUsingAdbKit(deviceUDID) {
      return _regeneratorRuntime.async(function startSessionOnSpecificDeviceUsingAdbKit$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _bluebird2['default']['try'](function () {
              _logger2['default'].info('running command...\n adb -s ' + deviceUDID + ' shell am instrument -w io.appium.uiautomator2.server.test/android.support.test.runner.AndroidJUnitRunner... ');
              client.shell(deviceUDID, "am instrument -w io.appium.uiautomator2.server.test/android.support.test.runner.AndroidJUnitRunner");
            })['catch'](function (err) {
              _logger2['default'].error('Something went wrong while executing instrument test:', err.stack);
            });

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startSessionUsingAdbkit',
    value: function startSessionUsingAdbkit() {
      return _regeneratorRuntime.async(function startSessionUsingAdbkit$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            client.listDevices().then(function (devices) {
              _bluebird2['default'].map(devices, function (device) {
                _logger2['default'].info("running command...\n adb shell am instrument -w io.appium.uiautomator2.server.test/android.support.test.runner.AndroidJUnitRunner... ");
                client.shell(device.id, "am instrument -w io.appium.uiautomator2.server.test/android.support.test.runner.AndroidJUnitRunner");
              });
            })['catch'](function (err) {
              _logger2['default'].error('Something went wrong while executing instrument test:', err.stack);
            });

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'deleteSession',
    value: function deleteSession() {
      return _regeneratorRuntime.async(function deleteSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Deleting UiAutomator2 server session');
            // rely on jwproxy's intelligence to know what we're talking about and
            // delete the current session
            context$2$0.prev = 1;
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.jwproxy.command('/', 'DELETE'));

          case 4:
            context$2$0.next = 9;
            break;

          case 6:
            context$2$0.prev = 6;
            context$2$0.t0 = context$2$0['catch'](1);

            _logger2['default'].warn('Did not get confirmation UiAutomator2 deleteSession worked; ' + ('Error was: ' + context$2$0.t0));

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[1, 6]]);
    }
  }, {
    key: 'killUiAutomatorOnDevice',
    value: function killUiAutomatorOnDevice() {
      return _regeneratorRuntime.async(function killUiAutomatorOnDevice$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.prev = 0;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.adb.killProcessesByName('io.appium.uiautomator2.server'));

          case 3:
            context$2$0.next = 8;
            break;

          case 5:
            context$2$0.prev = 5;
            context$2$0.t0 = context$2$0['catch'](0);

            _logger2['default'].info("Unable to kill the io.appium.uiautomator2.server process, assuming it is already killed");

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[0, 5]]);
    }
  }]);

  return UiAutomator2Server;
})();

exports['default'] = UiAutomator2Server;
module.exports = exports['default'];

// Installs the apks on to the device or emulator

// appending .test to apkPackage name to get test apk package name

//check server apk versionName

// killing any uiautomator existing processes
//# sourceMappingURL=data:application/json;base64,